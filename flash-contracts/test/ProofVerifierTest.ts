import { ethers } from 'hardhat';
import { loadFixture, mine } from '@nomicfoundation/hardhat-network-helpers';
import { ProofChainConfigStruct } from '../typechain-types/contracts/proof/ProofVerifier';
import { defaultAbiCoder, keccak256, toUtf8Bytes } from 'ethers/lib/utils';
import { printGasInfo } from './common/gas';
import { expect } from 'chai';
import { expectRevert } from './common/revert';
import { ProofVerifierTest } from '../typechain-types';

const encodeEventProof = (eventProofData: any): string => {
  const eventProof = defaultAbiCoder.encode(
    [
      'tuple(' +
        'uint64 srcSlot,' +
        'uint64 txSlot,' +
        'bytes32[] receiptsRootProof,' +
        'bytes32 receiptsRoot,' +
        'bytes[] receiptProof,' +
        'bytes txIndexRLPEncoded,' +
        'uint256 logIndex' +
      ')'
    ],
    [eventProofData],
  );
  return eventProof;
};

const waitMinLightClientDelay = async (proofVerifierTest: ProofVerifierTest): Promise<void> => {
  const minDelay = await proofVerifierTest.MIN_LIGHT_CLIENT_DELAY();
  const blockTime = 15;
  const safetyBlocks = 2;
  const blocksToWait = Math.ceil(minDelay.toNumber() / blockTime) + safetyBlocks;
  await mine(blocksToWait, { interval: blockTime });
};

describe('ProofVerifierTest', function () {
  async function deployFixture() {
    const LightClientMock = await ethers.getContractFactory('LightClientMock');
    const lightClientMock = await LightClientMock.deploy();

    const ProofVerifierTest = await ethers.getContractFactory('ProofVerifierTest');

    return {
      lightClientMock,
      ProofVerifierTest,
    };
  }

  it('Should verify hash event proof of AssetSend in Gnosis', async function () {
    const { lightClientMock, ProofVerifierTest } = await loadFixture(deployFixture);

    // Send tx on Gnosis for order 0x396276b42450088463d643d7c9aa371860c0579916b3a6281583c0db135c0305. See:
    // * https://gnosisscan.io/tx/0xe4cfe667781ffa66dfcf4eb196e5fb7d13dc0183908d8c1dcbd256aba8a2a894
    // * https://beacon.gnosischain.com/block/8974746
    const event = {
      signature: keccak256(toUtf8Bytes('AssetSend(bytes32)')),
      hash: '0x396276b42450088463d643d7c9aa371860c0579916b3a6281583c0db135c0305', // "orderHash" event arg
      chain: 100,
      contract: '0x9ecbfd880533db0af722d5fa3c01a1fc48bd0e31',
      slot: '8974746',
      headerRoot: '0x32cacc0bcd1ec1c5858ac3d5eea124549cde96504b6aa37d5aff3b6dfeec6567', // "Block Root" value
    };

    const eventProofData = {
      srcSlot: event.slot,
      txSlot: event.slot,
      receiptsRootProof: [
        '0x9930cacdb0b102cae80549940fe31cc532222807e9f462c91304589b012dc2cd',
        '0x09459cdaf241b8564ce8eb1281229306d6689154ffea8eb61b4f34d41737ea04',
        '0x9c661c1be76c64a6e5d51d35e4d4318e893eebfd0d07fb8c3bda7409da42e580',
        '0x774af8f0986f4ede71ee4bd8878b434ae107e5ec1731fa03acccdc119ebef300',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
        '0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b',
        '0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71',
        '0x15e5982cbc2e697ea89bd9658b342546c1921799f35f91879ef0fa29db595d93',
        '0xbdaad1d8403af14dc4a138f4198e7354e5ac61596b690819ece4fa9c06195b46',
        '0xcc5bf9fbab1cd87055d714e5442527cc1800017bcdfa0f45a1e71d77c33b8901',
        '0x18dc8e97435226465e02699f94e5fdebe58bad0a3f4abc3bd5cf52d5c5153206',
        '0xb781c8b8de3cb4550de204b5fcbe4284821532e1ecef9636b053a1cc2ebf304a',
      ],
      receiptsRoot: '0x16e671247b178ba4cecef5b6ce51a8fe8817b943d4eb119b75b8376256e4b5b3',
      receiptProof: [
        '0xf851a002c13ba34aab2f5b0ebaedfd91b5ae1da8bdbee2cd65012d23398ffdef1262df80808080808080a0e58215be848c1293dd381210359d84485553000a82b67410406d183b42adbbdd8080808080808080',
        '0xf8d180a00122200915daa9c5fc199b145d06dd0f269fc064cb2c3dbb15fa068ffb0d0f1ba0a23da54d9549567b4df85e00a2c96675f59c908a01b06bc8719f28059dad2571a0e31152f97bfdc9e47351ad8f19a573c03f17d8248c493aa8938ccccd138eb998a0011e8dc760b5525940bea74f055ff42954948cf9d6f4930761481965798dba27a0eed0f2f22851c2229d5b1691e537b3f570cc3792fa93905cddb554ecb4da007da01b6c18c3e1c3d876d1e50d626a9a754dec29e21e204075570107efac3a304f5380808080808080808080',
        '0xf9020a20b90206f90203018310ac80bf8f9f89b94ddafbb505ad214d7b80b1f830fccc89b60fb7a83f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000009ae477ffa4f42038b02cc0f276d2bdababf1f09da0000000000000000000000000fe20a6f6493a25fb0e02206d269ca1a4a01d26c2a00000000000000000000000000000000000000000000000000000000000017293f85a949ecbfd880533db0af722d5fa3c01a1fc48bd0e31f842a023164bf06272e7181c46edaa1489d6e021bab6e2ee7972b9662b467774dc4957a0396276b42450088463d643d7c9aa371860c0579916b3a6281583c0db135c030580',
      ],
      txIndexRLPEncoded: '0x06',
      logIndex: '1',
    };
    const eventProof = encodeEventProof(eventProofData);

    // Compare encoded HashEventProof struct to data formed by backend
    const expectedEventProof = '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000088f19a000000000000000000000000000000000000000000000000000000000088f19a00000000000000000000000000000000000000000000000000000000000000e016e671247b178ba4cecef5b6ce51a8fe8817b943d4eb119b75b8376256e4b5b3000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000006c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c9930cacdb0b102cae80549940fe31cc532222807e9f462c91304589b012dc2cd09459cdaf241b8564ce8eb1281229306d6689154ffea8eb61b4f34d41737ea049c661c1be76c64a6e5d51d35e4d4318e893eebfd0d07fb8c3bda7409da42e580774af8f0986f4ede71ee4bd8878b434ae107e5ec1731fa03acccdc119ebef3000000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d7115e5982cbc2e697ea89bd9658b342546c1921799f35f91879ef0fa29db595d93bdaad1d8403af14dc4a138f4198e7354e5ac61596b690819ece4fa9c06195b46cc5bf9fbab1cd87055d714e5442527cc1800017bcdfa0f45a1e71d77c33b890118dc8e97435226465e02699f94e5fdebe58bad0a3f4abc3bd5cf52d5c5153206b781c8b8de3cb4550de204b5fcbe4284821532e1ecef9636b053a1cc2ebf304a0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000053f851a002c13ba34aab2f5b0ebaedfd91b5ae1da8bdbee2cd65012d23398ffdef1262df80808080808080a0e58215be848c1293dd381210359d84485553000a82b67410406d183b42adbbdd80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d3f8d180a00122200915daa9c5fc199b145d06dd0f269fc064cb2c3dbb15fa068ffb0d0f1ba0a23da54d9549567b4df85e00a2c96675f59c908a01b06bc8719f28059dad2571a0e31152f97bfdc9e47351ad8f19a573c03f17d8248c493aa8938ccccd138eb998a0011e8dc760b5525940bea74f055ff42954948cf9d6f4930761481965798dba27a0eed0f2f22851c2229d5b1691e537b3f570cc3792fa93905cddb554ecb4da007da01b6c18c3e1c3d876d1e50d626a9a754dec29e21e204075570107efac3a304f538080808080808080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020df9020a20b90206f90203018310ac80bf8f9f89b94ddafbb505ad214d7b80b1f830fccc89b60fb7a83f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000009ae477ffa4f42038b02cc0f276d2bdababf1f09da0000000000000000000000000fe20a6f6493a25fb0e02206d269ca1a4a01d26c2a00000000000000000000000000000000000000000000000000000000000017293f85a949ecbfd880533db0af722d5fa3c01a1fc48bd0e31f842a023164bf06272e7181c46edaa1489d6e021bab6e2ee7972b9662b467774dc4957a0396276b42450088463d643d7c9aa371860c0579916b3a6281583c0db135c0305800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010600000000000000000000000000000000000000000000000000000000000000';
    expect(eventProof).to.be.equal(expectedEventProof);

    const proofChainConfigs: ProofChainConfigStruct[] = [
      {
        chain: event.chain,
        broadcaster: event.contract,
        lightClient: lightClientMock.address,
      },
    ];
    const proofVerifierTest = await ProofVerifierTest.deploy(proofChainConfigs);

    // Ensure reverts if inconsistent
    await expectRevert(
      proofVerifierTest.verifyHashEventProofTest(event.signature, event.hash, event.chain, eventProof),
      'PV: light client inconsistent',
    );

    await lightClientMock.setConsistent();

    // Ensure reverts if not timestamp
    await expectRevert(
      proofVerifierTest.verifyHashEventProofTest(event.signature, event.hash, event.chain, eventProof),
      'PV: no timestamp for slot',
    );

    await lightClientMock.setTimestamp(event.slot);

    // Ensure reverts if too early
    await expectRevert(
      proofVerifierTest.verifyHashEventProofTest(event.signature, event.hash, event.chain, eventProof),
      'PV: slot not settled yet',
    );

    // Wait min client delay
    await waitMinLightClientDelay(proofVerifierTest);

    // Ensure reverts if no header
    await expectRevert(
      proofVerifierTest.verifyHashEventProofTest(event.signature, event.hash, event.chain, eventProof),
      'PV: no header root',
    );

    await lightClientMock.setHeader(event.slot, event.headerRoot);

    // Validate proof
    await proofVerifierTest.verifyHashEventProofTest(event.signature, event.hash, event.chain, eventProof);
    const lastGasUsed = await proofVerifierTest.lastGasUsed();
    printGasInfo('call verifyHashEventProof (gnosis send)', lastGasUsed);
  });

  it('Should verify hash event proof of ReceiveEvent in Goerli', async function () {
    const { lightClientMock, ProofVerifierTest } = await loadFixture(deployFixture);

    // Receive tx on Goerli for order 0x00514ce10c7ffe2bcf367cd5cdd433fa68002331b04c982476af61a194926af5. See:
    // * https://goerli.etherscan.io/tx/0xcf6b7e9d2ae0a27c329c4dd567a86a550a77fee56bbe016d881bb255ee015b52
    // * https://goerli.beaconcha.in/slot/5614754
    const event = {
      signature: keccak256(toUtf8Bytes('AssetReceive(bytes32)')),
      hash: '0x00514ce10c7ffe2bcf367cd5cdd433fa68002331b04c982476af61a194926af5', // "orderHash" event arg
      chain: 5,
      contract: '0xefa513be7c0e9993a526e93ac05bc563634d127d',
      slot: '5614754',
      headerRoot: '0xfd8d439c55d841b3f3287b7c3651941e2f887fab1a176e59b1d4f8f7b3c389ae', // "Block Root" value
    };

    const eventProofData = {
      srcSlot: event.slot,
      txSlot: event.slot,
      receiptsRootProof: [
        '0x7eaddb0e2f48c2b76e3c60b8c95e07f0332402564d5c98dde06900be52b83bd4',
        '0x4ec7be0aa24d823a8ff6c6384663cf1bbb8d43e19fc1376bf7846061ac4f2268',
        '0x8e5e2696c5da33e20e7da7b84ecb96a7665d8c817028ee32f257c68ddd271d0f',
        '0xad89cb362bbf2d4058428a544d9b490109766ce9dab019e5fbf81a279abb27f4',
        '0x6b77500000000000000000000000000000000000000000000000000000000000',
        '0x3a6837382b06ae52003ab315624b0a8d91f6811f4889cbb69106bfd7a7708623',
        '0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71',
        '0xe05d8e7fc0601261811d2c98d524407daaee22df04bb7d7d5d0fc0e7699089fc',
        '0xfc9e6085c8d81e22ac1116231a54b6295902d514ec9ca9ad7d060d578a044674',
        '0x7cad18f23aa56ca2cee9b494c567f5a45fc012f1f9ea72aa2a9e6847b40a48c2',
        '0x37f284d1bb063eabe5f7102533d768d8931be7253ed0ff3f07de5563ad8f2289',
        '0xc80b19674ce27467c3a17d1edb8d99d28f68c825de6a05c5511ad603be7d630a',
    ],
      receiptsRoot: '0x282b6290c2a1e58c1f69c74f9cfa9dcf056af505c544bd634387569e47e0f350',
      receiptProof: [
        '0xf8b1a0578ca3b2ee38697d20721ec338486fca21c5765699ee701bd3c933adf3555d85a0e9fed1f3f6551bdba95c1f110657eb95cb42bedd9fe61db71a1f4fd2df3a56b5a0241e99b0de8175b459e49d3269dffe01c6e1b93394f0f846d646a454c8e40a89a0c118d212c118d34ce1c02e190284d052df18edb452580dfd84ab53e66643b44e80808080a0e58215be848c1293dd381210359d84485553000a82b67410406d183b42adbbdd8080808080808080',
        '0xf901b1a0bf4187da88b1202308bbda8cf26281319b32c135faad81408e0101e100cd75aaa07ecd85cc9c80af0e12944989cbb1e5270c345b617c5ccc5e5696c519c5b8250fa07b0357ea6601d61846bcf57d9fc369d8508b246bef1c1c6bbc8b2aa7d0f2fb6ea0d6a722d1a356befd88c279701f48a35c75a05884572a07bfa10006a0ed102d31a0a74eddc66e9a8c8e2efe172e675d9a9cd37f7c109ea0d91f4cd862d138f54573a0de80dde13003c3827e2baac20e3875a6bf582644a55a298cfe7fa3e97ded41b7a086ee70d50a8082211633be90a87ed92fd8db75d12f5eb65111f5559bd8ddbba3a0991900270d38ad83b33b95cb78d730a159fbd2d7dc76d366397665c7a9dc582da09bc31629a7d39bbb6d62a2b691ea5b6a930643c91a665f3a025ecbe2b921d738a0a9ae6d1f4e5e5671185e1a7bed66e11e94528f9cdce97d3eeb64502b3f344e31a0501345a77da3580daaa04076bc5f41d8aa5af31fa9461ba399cc623ccee66783a02485eba6341c2d022d44a7e6628e2cd8f54ed7c2365f72639a6c88832b4bce18a0f2161a9f3877e2d3683235f342bf99e079711d1bab10331c5a8f1f385a79c86280808080',
        '0xf9020b20b9020702f902030183825d1bbf8f9f89b94b4fbf271143f4fbf7b91a5ded31805e42b2208d6f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000009ae477ffa4f42038b02cc0f276d2bdababf1f09da00000000000000000000000009ae477ffa4f42038b02cc0f276d2bdababf1f09da00000000000000000000000000000000000000000000000000001c6bf52634000f85a94efa513be7c0e9993a526e93ac05bc563634d127df842a0ebd49f22611487a9df09f5dfbcabfa4aa714bf6c3859fa6d901fba02e205f71fa000514ce10c7ffe2bcf367cd5cdd433fa68002331b04c982476af61a194926af580',
      ],
      txIndexRLPEncoded: '0x38',
      logIndex: '1',
    };
    const eventProof = encodeEventProof(eventProofData);

    // Compare encoded HashEventProof struct to data formed by backend
    const expectedEventProof = '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000055aca2000000000000000000000000000000000000000000000000000000000055aca200000000000000000000000000000000000000000000000000000000000000e0282b6290c2a1e58c1f69c74f9cfa9dcf056af505c544bd634387569e47e0f350000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c7eaddb0e2f48c2b76e3c60b8c95e07f0332402564d5c98dde06900be52b83bd44ec7be0aa24d823a8ff6c6384663cf1bbb8d43e19fc1376bf7846061ac4f22688e5e2696c5da33e20e7da7b84ecb96a7665d8c817028ee32f257c68ddd271d0fad89cb362bbf2d4058428a544d9b490109766ce9dab019e5fbf81a279abb27f46b775000000000000000000000000000000000000000000000000000000000003a6837382b06ae52003ab315624b0a8d91f6811f4889cbb69106bfd7a7708623db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71e05d8e7fc0601261811d2c98d524407daaee22df04bb7d7d5d0fc0e7699089fcfc9e6085c8d81e22ac1116231a54b6295902d514ec9ca9ad7d060d578a0446747cad18f23aa56ca2cee9b494c567f5a45fc012f1f9ea72aa2a9e6847b40a48c237f284d1bb063eabe5f7102533d768d8931be7253ed0ff3f07de5563ad8f2289c80b19674ce27467c3a17d1edb8d99d28f68c825de6a05c5511ad603be7d630a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000b3f8b1a0578ca3b2ee38697d20721ec338486fca21c5765699ee701bd3c933adf3555d85a0e9fed1f3f6551bdba95c1f110657eb95cb42bedd9fe61db71a1f4fd2df3a56b5a0241e99b0de8175b459e49d3269dffe01c6e1b93394f0f846d646a454c8e40a89a0c118d212c118d34ce1c02e190284d052df18edb452580dfd84ab53e66643b44e80808080a0e58215be848c1293dd381210359d84485553000a82b67410406d183b42adbbdd80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b4f901b1a0bf4187da88b1202308bbda8cf26281319b32c135faad81408e0101e100cd75aaa07ecd85cc9c80af0e12944989cbb1e5270c345b617c5ccc5e5696c519c5b8250fa07b0357ea6601d61846bcf57d9fc369d8508b246bef1c1c6bbc8b2aa7d0f2fb6ea0d6a722d1a356befd88c279701f48a35c75a05884572a07bfa10006a0ed102d31a0a74eddc66e9a8c8e2efe172e675d9a9cd37f7c109ea0d91f4cd862d138f54573a0de80dde13003c3827e2baac20e3875a6bf582644a55a298cfe7fa3e97ded41b7a086ee70d50a8082211633be90a87ed92fd8db75d12f5eb65111f5559bd8ddbba3a0991900270d38ad83b33b95cb78d730a159fbd2d7dc76d366397665c7a9dc582da09bc31629a7d39bbb6d62a2b691ea5b6a930643c91a665f3a025ecbe2b921d738a0a9ae6d1f4e5e5671185e1a7bed66e11e94528f9cdce97d3eeb64502b3f344e31a0501345a77da3580daaa04076bc5f41d8aa5af31fa9461ba399cc623ccee66783a02485eba6341c2d022d44a7e6628e2cd8f54ed7c2365f72639a6c88832b4bce18a0f2161a9f3877e2d3683235f342bf99e079711d1bab10331c5a8f1f385a79c86280808080000000000000000000000000000000000000000000000000000000000000000000000000000000000000020ef9020b20b9020702f902030183825d1bbf8f9f89b94b4fbf271143f4fbf7b91a5ded31805e42b2208d6f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000009ae477ffa4f42038b02cc0f276d2bdababf1f09da00000000000000000000000009ae477ffa4f42038b02cc0f276d2bdababf1f09da00000000000000000000000000000000000000000000000000001c6bf52634000f85a94efa513be7c0e9993a526e93ac05bc563634d127df842a0ebd49f22611487a9df09f5dfbcabfa4aa714bf6c3859fa6d901fba02e205f71fa000514ce10c7ffe2bcf367cd5cdd433fa68002331b04c982476af61a194926af58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013800000000000000000000000000000000000000000000000000000000000000';
    expect(eventProof).to.be.equal(expectedEventProof);

    const proofChainConfigs: ProofChainConfigStruct[] = [
      {
        chain: event.chain,
        broadcaster: event.contract,
        lightClient: lightClientMock.address,
      },
    ];
    const proofVerifierTest = await ProofVerifierTest.deploy(proofChainConfigs);

    await lightClientMock.setConsistent();
    await lightClientMock.setHeader(event.slot, event.headerRoot);
    await lightClientMock.setTimestamp(event.slot);
    await waitMinLightClientDelay(proofVerifierTest);

    // Validate proof
    await proofVerifierTest.verifyHashEventProofTest(event.signature, event.hash, event.chain, eventProof);
    const lastGasUsed = await proofVerifierTest.lastGasUsed();
    printGasInfo('call verifyHashEventProof (goerli receive)', lastGasUsed);
  });
});
